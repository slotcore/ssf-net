<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
        <Title>NgTsComponentEditDetail</Title>
        <Author>Jose Chacon</Author>
        <Description>Agrega las acciones para un controlador base - MVC ASP.Net Core</Description>
        <Shortcut>ngtscmpnteditdetail</Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>ModuleName</ID>
          <ToolTip>Reemplazar por el Nombre del modelo</ToolTip>
          <Default>Master</Default>
        </Literal>
        <Literal>
          <ID>ModuleInstance</ID>
          <ToolTip>Reemplazar por el Nombre del modelo</ToolTip>
          <Default>master</Default>
        </Literal>
        <Literal>
          <ID>ModuleLocalName</ID>
          <ToolTip>Reemplazar por el Nombre del modelo</ToolTip>
          <Default>master</Default>
        </Literal>
        <Literal>
          <ID>ModelName</ID>
          <ToolTip>Reemplazar por el Nombre del modelo</ToolTip>
          <Default>ModelName</Default>
        </Literal>
        <Literal>
          <ID>ModelInstance</ID>
          <ToolTip>Reemplazar por el Nombre del modelo</ToolTip>
          <Default>ModelInstance</Default>
        </Literal>
        <Literal>
          <ID>ModelLocalName</ID>
          <ToolTip>Reemplazar por el Nombre del modelo</ToolTip>
          <Default>ModelInstance</Default>
        </Literal>
        <Literal>
          <ID>ParentInstance</ID>
          <ToolTip>Reemplazar por el Nombre del modelo</ToolTip>
          <Default>ParentInstance</Default>
        </Literal>
        <Literal>
          <ID>PropName1</ID>
          <ToolTip>Nombre de la propiedad 1</ToolTip>
          <Default>code</Default>
        </Literal>
        <Literal>
          <ID>PropName2</ID>
          <ToolTip>Nombre de la propiedad 2</ToolTip>
          <Default>name</Default>
        </Literal>
        <Literal>
          <ID>PropName3</ID>
          <ToolTip>Nombre de la propiedad 3</ToolTip>
          <Default>description</Default>
        </Literal>
      </Declarations>
        <Code Language="TypeScript">
        <![CDATA[import { Component, OnInit, Inject } from '@angular/core';
import { FormGroup, FormControl, Validators } from '@angular/forms';
import { AlertService } from '../../../../shared/services/alert.service';
import { ValidationFormService } from '../../../../shared/services/validation-form.service';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
//
import { $ModuleName$Service } from '../../../services/$ModuleLocalName$.service';
import { $ModelName$ } from '../../../models/$ModelLocalName$';

@Component({
  selector: 'app-$ModelLocalName$-edit',
  templateUrl: './$ModelLocalName$-edit.component.html',
  styleUrls: ['./$ModelLocalName$-edit.component.scss']
})

export class $ModelName$EditComponent implements OnInit {
  $ModuleInstance$Service: $ModuleName$Service;
  alertService: AlertService;
  validationFormService: ValidationFormService;
  dialogRef: MatDialogRef<$ModelName$EditComponent>;
  //
  $ModelInstance$Id: number;
  $ModelInstance$: $ModelName$ = new $ModelName$();
  $ModelInstance$FormGroup: FormGroup;
  //
  $ParentInstance$Id: number;

  constructor($ModuleInstance$Service: $ModuleName$Service
    , alertService: AlertService
    , validationFormService: ValidationFormService
    , dialogRef: MatDialogRef<$ModelName$EditComponent>
    , @Inject(MAT_DIALOG_DATA) $ModelInstance$Id: number) {

    this.$ModuleInstance$Service = $ModuleInstance$Service;
    this.alertService = alertService;
    this.validationFormService = validationFormService;
    this.dialogRef = dialogRef;
    //
    this.$ModelInstance$Id = $ModelInstance$Id;  
    this.$ModelInstance$FormGroup = new FormGroup({
      $PropName1$: new FormControl(this.$ModelInstance$.$PropName1$, Validators.required),
      $PropName2$: new FormControl(this.$ModelInstance$.$PropName2$, Validators.required),
      $PropName3$: new FormControl(this.$ModelInstance$.$PropName3$, Validators.required)
    });
  }

  ngOnInit(): void {
    this.load(this.$ModelInstance$Id);
  }

  load($ModelInstance$Id: number) {
    this.$ModuleInstance$Service.$ModelInstance$Get($ModelInstance$Id)
      .subscribe(
        (response: $ModelName$) => {
          this.$ModelInstance$ = response;
          this.$ParentInstance$Id = this.$ModelInstance$.$ParentInstance$Id;
          this.$ModelInstance$FormGroup.patchValue(this.$ModelInstance$);
        }
        , err => {
          console.log(err);
        });
  }

  validateError(controlName: string): boolean {
    return this.validationFormService.validateError(this.$ModelInstance$FormGroup, controlName);
  }

  getError(controlName: string): string {
    return this.validationFormService.getError(this.$ModelInstance$FormGroup, controlName);
  }

  getClass(controlName: string) {
    return this.validationFormService.getClass(this.$ModelInstance$FormGroup, controlName);
  }

  save() {
    this.$ModelInstance$ = this.$ModelInstance$FormGroup.value;
    this.$ModelInstance$.$ParentInstance$Id = this.$ParentInstance$Id;
    this.$ModelInstance$.$ModelInstance$Id = this.$ModelInstance$Id;
    this.$ModuleInstance$Service.$ModelInstance$Edit(this.$ModelInstance$Id, this.$ModelInstance$).subscribe(
      (response) => {
        this.dialogRef.close(response);
      }
      , err => {
        this.alertService.showError('Error!', 'Ocurrió un error al grabar la unidad de medida');
      }
    )
  }

  cancel() {
    this.dialogRef.close();
  }
}
]]>
        </Code>
    </Snippet>
    </CodeSnippet>
</CodeSnippets>
